#!/usr/bin/env python3
import sys
import re

def stripwhite(text):
    lst = text.split('"')
    for i, item in enumerate(lst):
        if not i % 2:
            lst[i] = re.sub("\s+", "\t", item)
    return '"'.join(lst)

def typeFinder(line):
    '''
    This will grab the record type or lack thereof.
    '''
    if "SOA" in line:
        return 'continue' #get rid of the SOA
    elif "CNAME" in line:
        recordType="CNAME"
    elif "A" in line:
        recordType="A"
    elif "TXT" in line:
        recordType="TXT"
    elif "SPF" in line:
        recordType="SPF"
    elif "MX" in line:
        recordType="MX"
    elif "CAA" in line:
        recordType="CAA"
    elif "PTR" in line:
        recordType="PTR"
    elif "SRV" in line:
        recordType="SRV"
    elif "NS" in line:
        recordType="NS"
    else:
        recordType="none"
    return recordType

def recordHandler(line, recordType, removeDomain3):
    '''
    This will handle the exeptions for specific record types and grab the output.
    '''
    if (recordType != "none"): 
        if "IN" not in line: #add the IN if it's not there
            withIn = ("IN\t"+recordType)
            output = removeDomain3.replace(recordType, withIn)
        else:
            output = removeDomain3
    else:
        output = 'continue'
    if (recordType == "NS"): #remove root NS records
        if "@" in output:
            output = 'continue'
    if (recordType == "CNAME"): #no CNAME records for root
        if "@\tIN" in output:
            print("\033[1;31;40m ERROR: CANNOT HAVE CNAME FOR THE ROOT DOMAIN  \n")
            quit()
    if (recordType == "SRV"): #no SRV records for the root
        if "@" in (output.split('.')[1]):
            print("\033[1;31;40m ERROR: CANNOT HAVE SRV FOR THE ROOT DOMAIN  \n")
            quit()
    return output

def originCheck(zone):
    '''
    This will check if the origin exists and ask for it if it doesn't.
    '''
    with open(zone) as zonefile:
        if "$ORIGIN" not in zonefile.read(): #if origin is not defined at all
            origin = (str(input("What is the origin domain?\n")))
            originDot = (origin+".")
            dotOrigindot = ("."+origin+".") #all variations found
            print("Here is your fixed zone:\n\n")
            print ("$ORIGIN "+origin) #add the origin
            return origin,originDot,dotOrigindot
    with open(zone) as zonefile:    
        if ";$ORIGIN" in zonefile.read(): #make sure it isn't commented out
            origin = (str(input("What is the origin domain?\n")))
            originDot = (origin+".")
            dotOrigindot = ("."+origin+".") #all variations found
            print("Here is your fixed zone:\n\n")
            print ("$ORIGIN "+origin) #add the origin
            return origin,originDot,dotOrigindot

def ttlCheck(zone):
    '''
    This will check for a TTL and add one if it isn't there
    '''
    with open(zone) as zonefile:
        if "$TTL" not in zonefile.read():
            print ("$TTL 3600")

def main():
    if len(sys.argv) <= 1: #if there is no argument passed
        print ("")
        print ("This script will turn a zone file into the correct format for DNS Made Easy.")
        print ("--- Incorrect Syntax ----")
        print ("Usage: zone <zone file>")
        print ("Example: zone dnsmadeeasy.txt")
        print ("Example: zone constellix.txt")
        print ("")
    else:
        zone=sys.argv[1] #grab file from first argument
        try:
            origin,originDot,dotOrigindot = originCheck(zone)
        except:
            print("Here is your fixed zone:\n\n")
        ttlCheck(zone)
        with open(zone) as zonefile:
            for line in zonefile: #run file line by line:
                try:
                    if ";" in line[0]: #remove comments
                        continue
                except:
                    continue
                if "$ORIGIN" not in line: #remove the origin domain from the FQDN
                    if origin:
                        removeDomain1 = line.replace(dotOrigindot, "")
                        removeDomain2 = re.sub(originDot+'\s','@',removeDomain1)
                        removeDomain3 = re.sub(origin+'\s','@',removeDomain2)
                else:
                    originline = line.split() #split the declaration of the origin
                    origin = originline[1] #grab the origin
                    originDot = (origin+".")
                    dotOrigindot = ("."+origin+".") #all variations found
                    strippedOutput = line.strip('\n') #strip new lines
                    print(strippedOutput) #print out the origin if it already exists
                    continue
                if "$TTL" in line:
                    strippedOutput = line.strip('\n') #strip new lines
                    print(strippedOutput) #print the default TTL if it already exists
                    continue
                recordType = typeFinder(line)
                if recordType == 'continue':
                    continue
                output = recordHandler(line, recordType, removeDomain3)
                if output == 'continue':
                    continue
                if line.strip():
                    strippedOutput = output.strip('\n') #strip new lines
                    formattedOutput = ' '.join(strippedOutput.split())
                    print(stripwhite(formattedOutput))

if __name__ == "__main__":
    main()